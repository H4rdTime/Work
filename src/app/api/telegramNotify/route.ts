import { NextRequest, NextResponse } from 'next/server';

export async function POST(req: NextRequest) {
    try {
        const { name, phone, email, address, service, file_url, preferred_contact } = await req.json();

        const token = process.env.TELEGRAM_BOT_TOKEN;
        const chatIdsStr = process.env.TELEGRAM_CHAT_IDS;
        if (!token || !chatIdsStr) {
            console.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è");
            return NextResponse.json({ error: "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞" }, { status: 500 });
        }

        const chatIds = chatIdsStr.split(',').map(id => id.trim());

        // Escape underscores in the email address
        const escapedEmail = email.replace(/_/g, '\\_');

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Markdown-—Ä–∞–∑–º–µ—Ç–∫–æ–π, –¥–æ–±–∞–≤–ª—è—è —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏
        let message = `
üìå *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!*

üë§ *–ò–º—è:* ${name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* \`${phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}\`
üìß *Email:* ${escapedEmail || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìç *–ê–¥—Ä–µ—Å:* ${address || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üõ† *–£—Å–ª—É–≥–∞:* ${service || '–ù–µ –≤—ã–±—Ä–∞–Ω–∞'}
üó£ *–°–ø–æ—Å–æ–± —Å–≤—è–∑–∏:* ${preferred_contact || '–ù–µ —É–∫–∞–∑–∞–Ω'}
        `;

        if (file_url) {
            message += `\nüìé *–§–∞–π–ª:* [–°–∫–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑](${file_url})`;
        }

        const telegramUrl = `https://api.telegram.org/bot${token}/sendMessage`;

        const results = await Promise.allSettled(
            chatIds.map(async (chatId) => {
                const response = await fetch(telegramUrl, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json; charset=utf-8",
                        "User-Agent": "AquaServiceBot/1.0"
                    },
                    body: JSON.stringify({
                        chat_id: chatId,
                        text: message,
                        parse_mode: "Markdown",
                        disable_web_page_preview: true
                    })
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(`Chat ${chatId}: ${errorData.description}`);
                }
                return response.json();
            })
        );

        results.forEach((result, index) => {
            if (result.status === "rejected") {
                console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç ${chatIds[index]}:`, result.reason);
            }
        });

        return NextResponse.json({
            success: true,
            stats: {
                total: chatIds.length,
                success: results.filter(r => r.status === "fulfilled").length
            }
        });

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ API:", error);
        return NextResponse.json({
            error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
            details: error instanceof Error ? error.message : 'Unknown error'
        }, { status: 500 });
    }
}
