import { NextRequest, NextResponse } from 'next/server';

export async function POST(req: NextRequest) {
    try {
        // –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º —Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –ø–æ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
        const { 
            name = '–ù–µ —É–∫–∞–∑–∞–Ω–æ', 
            phone = '–ù–µ —É–∫–∞–∑–∞–Ω', 
            email = '–ù–µ —É–∫–∞–∑–∞–Ω', // <-- –£—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            address = '–ù–µ —É–∫–∞–∑–∞–Ω', 
            service = '–ù–µ –≤—ã–±—Ä–∞–Ω–∞', 
            file_url, // file_url –º–æ–∂–µ—Ç –±—ã—Ç—å undefined, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            preferred_contact = '–ù–µ —É–∫–∞–∑–∞–Ω' 
        } = await req.json();

        const token = process.env.TELEGRAM_BOT_TOKEN;
        const chatIdsStr = process.env.TELEGRAM_CHAT_IDS;
        if (!token || !chatIdsStr) {
            console.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_IDS"); // –£—Ç–æ—á–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            return NextResponse.json({ error: "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞" }, { status: 500 });
        }

        const chatIds = chatIdsStr.split(',').map(id => id.trim());

        // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ email –Ω–µ "–ù–µ —É–∫–∞–∑–∞–Ω"
        // –ò —Ç–∞–∫–∂–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—á–∫–∏, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ Markdown
        const displayEmail = (email === '–ù–µ —É–∫–∞–∑–∞–Ω' || !email.trim()) 
                             ? '–ù–µ —É–∫–∞–∑–∞–Ω' 
                             : email.replace(/_/g, '\\_').replace(/\./g, '\\.'); // <-- –£–ª—É—á—à–µ–Ω–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Markdown-—Ä–∞–∑–º–µ—Ç–∫–æ–π, –¥–æ–±–∞–≤–ª—è—è —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏
        let message = `
üìå *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!*

üë§ *–ò–º—è:* ${name}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* \`${phone}\`
üìß *Email:* ${displayEmail}
üìç *–ê–¥—Ä–µ—Å:* ${address}
üõ† *–£—Å–ª—É–≥–∞:* ${service}
üó£ *–°–ø–æ—Å–æ–± —Å–≤—è–∑–∏:* ${preferred_contact}
        `;

        if (file_url) {
            // URL –≤ Markdown –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ [—Ç–µ–∫—Å—Ç](—Å—Å—ã–ª–∫–∞)
            // –ò —Å–∞–º URL –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª–æ–≤ –∏–ª–∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ –±–µ–∑ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            // –õ—É—á—à–µ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞—Ç—å URL, Telegram —Å–∞–º –µ–≥–æ —Å–¥–µ–ª–∞–µ—Ç –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º
            message += `\nüìé *–§–∞–π–ª:* ${file_url}`;
        }

        const telegramUrl = `https://api.telegram.org/bot${token}/sendMessage`;

        // –î–æ–±–∞–≤–∏–º –±–æ–ª—å—à–µ –ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log('Sending message to Telegram:', {
            chat_ids: chatIds,
            message_text: message,
            parse_mode: "Markdown"
        });

        const results = await Promise.allSettled(
            chatIds.map(async (chatId) => {
                const response = await fetch(telegramUrl, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json; charset=utf-8",
                        "User-Agent": "AquaServiceBot/1.0"
                    },
                    body: JSON.stringify({
                        chat_id: chatId,
                        text: message,
                        parse_mode: "Markdown", // –ò–ª–∏ "MarkdownV2" –µ—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –≤—Å–µ –µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
                        disable_web_page_preview: true
                    })
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º chatId
                    console.error(`Telegram API Error for chat ${chatId}:`, errorData);
                    throw new Error(`Chat ${chatId}: ${errorData.description || 'Unknown error'}`);
                }
                return response.json();
            })
        );

        results.forEach((result, index) => {
            if (result.status === "rejected") {
                console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç ${chatIds[index]}:`, result.reason);
            }
        });

        return NextResponse.json({
            success: true,
            stats: {
                total: chatIds.length,
                success: results.filter(r => r.status === "fulfilled").length
            }
        });

    } catch (error) {
        console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ API —Ä–æ—É—Ç–µ /api/telegramNotify:", error); // –£—Ç–æ—á–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        return NextResponse.json({
            success: false, // –î–æ–±–∞–≤–∏–º success:false –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ
            error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
            details: error instanceof Error ? error.message : 'Unknown error'
        }, { status: 500 });
    }
}