import { NextResponse } from 'next/server';

export async function POST(req: Request) {
    try {
        const { name, phone, email, address } = await req.json();

        const token = process.env.TELEGRAM_BOT_TOKEN;
        const chatId = process.env.TELEGRAM_CHAT_ID;

        if (!token || !chatId) {
            return NextResponse.json({ error: "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è" }, { status: 500 });
        }

        const message = `
üìå *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!*  

üë§ –ò–º—è: ${name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
üìß Email: ${email}
üìç –ê–¥—Ä–µ—Å: ${address}
        `.trim();

        const telegramUrl = `https://api.telegram.org/bot${token}/sendMessage`;

        const telegramResponse = await fetch(telegramUrl, {
            method: "POST",
            headers: { "Content-Type": "application/json; charset=utf-8" },
            body: JSON.stringify({
                chat_id: chatId,
                text: message, // –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –±–µ–∑ encodeURIComponent()
                parse_mode: "Markdown"
            })
        });

        const result = await telegramResponse.json();

        if (!result.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ Telegram: ${result.description}`);
        }

        return NextResponse.json({ success: true });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ API:", error);
        return NextResponse.json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }, { status: 500 });
    }
}
